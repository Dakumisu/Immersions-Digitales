{"id":"js/libs/glsl/vertex.glsl","dependencies":[{"name":"E:\\MMI\\PTUT\\Site-ID\\package.json","includedInParent":true,"mtime":1611281913709}],"generated":{"js":"module.exports = \"varying vec2 vUv;\\n\\nuniform float time;\\n\\n// const float pi = 3.1415925;\\n\\n// void main() {\\n  //   uv = vUv;\\n  //   gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0 );\\n// }\\n\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\n// varying vec2 vUv;\\n// uniform float time;\\n\\nvec3 mod289(vec3 x){\\n  return x-floor(x*(1./289.))*289.;\\n}\\n\\nvec4 mod289(vec4 x){\\n  return x-floor(x*(1./289.))*289.;\\n}\\n\\nvec4 permute(vec4 x){\\n  return mod289(((x*34.)+1.)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159-.85373472095314*r;\\n}\\n\\nfloat snoise(vec3 v){\\n  const vec2 C=vec2(1./6.,1./3.);\\n  const vec4 D=vec4(0.,.5,1.,2.);\\n  \\n  // First corner\\n  vec3 i=floor(v+dot(v,C.yyy));\\n  vec3 x0=v-i+dot(i,C.xxx);\\n  \\n  // Other corners\\n  vec3 g=step(x0.yzx,x0.xyz);\\n  vec3 l=1.-g;\\n  vec3 i1=min(g.xyz,l.zxy);\\n  vec3 i2=max(g.xyz,l.zxy);\\n  \\n  vec3 x1=x0-i1+C.xxx;\\n  vec3 x2=x0-i2+C.yyy;\\n  vec3 x3=x0-D.yyy;\\n  \\n  // Permutations\\n  i=mod289(i);\\n  vec4 p=permute(permute(permute(i.z+vec4(0.,i1.z,i2.z,1.))+i.y+vec4(0.,i1.y,i2.y,1.))+i.x+vec4(0.,i1.x,i2.x,1.));\\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_=.142857142857;\\n  vec3 ns=n_*D.wyz-D.xzx;\\n  \\n  vec4 j=p-49.*floor(p*ns.z*ns.z);\\n  \\n  vec4 x_=floor(j*ns.z);\\n  vec4 y_=floor(j-7.*x_);\\n  \\n  vec4 x=x_*ns.x+ns.yyyy;\\n  vec4 y=y_*ns.x+ns.yyyy;\\n  vec4 h=1.-abs(x)-abs(y);\\n  \\n  vec4 b0=vec4(x.xy,y.xy);\\n  vec4 b1=vec4(x.zw,y.zw);\\n  \\n  vec4 s0=floor(b0)*2.+1.;\\n  vec4 s1=floor(b1)*2.+1.;\\n  vec4 sh=-step(h,vec4(0.));\\n  \\n  vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;\\n  vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;\\n  \\n  vec3 p0=vec3(a0.xy,h.x);\\n  vec3 p1=vec3(a0.zw,h.y);\\n  vec3 p2=vec3(a1.xy,h.z);\\n  vec3 p3=vec3(a1.zw,h.w);\\n  \\n  // Normalise gradients\\n  vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));\\n  p0*=norm.x;\\n  p1*=norm.y;\\n  p2*=norm.z;\\n  p3*=norm.w;\\n  \\n  // Mix final noise value\\n  vec4 m=max(.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.);\\n  m=m*m;\\n  return 42.*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),\\n  dot(p2,x2),dot(p3,x3)));\\n}\\n\\nvoid main(){\\n  vUv=uv;\\n  \\n  vec3 pos=position;\\n  float noiseFreq=.5;\\n  float noiseAmp=.03;\\n  vec3 noisePos=vec3(pos.x*noiseFreq+time,pos.y,pos.z);\\n  pos.z+=snoise(noisePos)*noiseAmp;\\n  \\n  gl_Position=projectionMatrix*modelViewMatrix*vec4(pos,1.);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/libs/glsl/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/libs/glsl/vertex.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/libs/glsl/vertex.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/libs/glsl/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/libs/glsl/vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":2471},"source":"js/libs/glsl/vertex.glsl","original":{"line":1,"column":0}}],"sources":{"js/libs/glsl/vertex.glsl":"module.exports=\"varying vec2 vUv;\\n\\nuniform float time;\\n\\n// const float pi = 3.1415925;\\n\\n// void main() {\\n  //   uv = vUv;\\n  //   gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0 );\\n// }\\n\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\n// varying vec2 vUv;\\n// uniform float time;\\n\\nvec3 mod289(vec3 x){\\n  return x-floor(x*(1./289.))*289.;\\n}\\n\\nvec4 mod289(vec4 x){\\n  return x-floor(x*(1./289.))*289.;\\n}\\n\\nvec4 permute(vec4 x){\\n  return mod289(((x*34.)+1.)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159-.85373472095314*r;\\n}\\n\\nfloat snoise(vec3 v){\\n  const vec2 C=vec2(1./6.,1./3.);\\n  const vec4 D=vec4(0.,.5,1.,2.);\\n  \\n  // First corner\\n  vec3 i=floor(v+dot(v,C.yyy));\\n  vec3 x0=v-i+dot(i,C.xxx);\\n  \\n  // Other corners\\n  vec3 g=step(x0.yzx,x0.xyz);\\n  vec3 l=1.-g;\\n  vec3 i1=min(g.xyz,l.zxy);\\n  vec3 i2=max(g.xyz,l.zxy);\\n  \\n  vec3 x1=x0-i1+C.xxx;\\n  vec3 x2=x0-i2+C.yyy;\\n  vec3 x3=x0-D.yyy;\\n  \\n  // Permutations\\n  i=mod289(i);\\n  vec4 p=permute(permute(permute(i.z+vec4(0.,i1.z,i2.z,1.))+i.y+vec4(0.,i1.y,i2.y,1.))+i.x+vec4(0.,i1.x,i2.x,1.));\\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_=.142857142857;\\n  vec3 ns=n_*D.wyz-D.xzx;\\n  \\n  vec4 j=p-49.*floor(p*ns.z*ns.z);\\n  \\n  vec4 x_=floor(j*ns.z);\\n  vec4 y_=floor(j-7.*x_);\\n  \\n  vec4 x=x_*ns.x+ns.yyyy;\\n  vec4 y=y_*ns.x+ns.yyyy;\\n  vec4 h=1.-abs(x)-abs(y);\\n  \\n  vec4 b0=vec4(x.xy,y.xy);\\n  vec4 b1=vec4(x.zw,y.zw);\\n  \\n  vec4 s0=floor(b0)*2.+1.;\\n  vec4 s1=floor(b1)*2.+1.;\\n  vec4 sh=-step(h,vec4(0.));\\n  \\n  vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;\\n  vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;\\n  \\n  vec3 p0=vec3(a0.xy,h.x);\\n  vec3 p1=vec3(a0.zw,h.y);\\n  vec3 p2=vec3(a1.xy,h.z);\\n  vec3 p3=vec3(a1.zw,h.w);\\n  \\n  // Normalise gradients\\n  vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));\\n  p0*=norm.x;\\n  p1*=norm.y;\\n  p2*=norm.z;\\n  p3*=norm.w;\\n  \\n  // Mix final noise value\\n  vec4 m=max(.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.);\\n  m=m*m;\\n  return 42.*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),\\n  dot(p2,x2),dot(p3,x3)));\\n}\\n\\nvoid main(){\\n  vUv=uv;\\n  \\n  vec3 pos=position;\\n  float noiseFreq=.5;\\n  float noiseAmp=.03;\\n  vec3 noisePos=vec3(pos.x*noiseFreq+time,pos.y,pos.z);\\n  pos.z+=snoise(noisePos)*noiseAmp;\\n  \\n  gl_Position=projectionMatrix*modelViewMatrix*vec4(pos,1.);\\n}\";"},"lineCount":null}},"error":null,"hash":"6cb86321bcb256df7e26d975f87713a2","cacheData":{"env":{}}}